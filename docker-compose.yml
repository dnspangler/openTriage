version: '3'
services:

  redis_db:
    container_name: redis
    image: redis
    restart: always
  
  nginx:
    container_name: nginx
    image: nginx
    volumes:
      - ./lib/nginx.conf:/etc/nginx/nginx.conf.temp
      - ./lib/ssl/.:/etc/nginx/ssl/
      - ./lib/assets/index.html:/etc/nginx/html/index.html
    links:
      - opentriage
      - shiny
    environment:
      - HOST_NAME=${HOST_NAME}
    ports:
      - 80:80
      - 443:443
    command: /bin/bash -c "envsubst '$$HOST_NAME' < /etc/nginx/nginx.conf.temp > /etc/nginx/nginx.conf && nginx -g 'daemon off;'"

  opentriage:
    container_name: opentriage
    build: .
    restart: always
    ports:
     - 5000
    links:
     - redis_db
    environment:
     - FRAMEWORK=${FRAMEWORK}
     - DEV_MODE=${DEV_MODE}
     - RANDOMIZE=${RANDOMIZE}
     - SECRET=${SECRET}
     - DEFAULT_FRAMEWORK=news_adhoc
     - DEFAULT_DEV_MODE=True
     - REDIS_URL=redis://redis_db:6379
     - SSL_CERT_PATH=./lib/ssl/certificate.pem
     - SSL_KEY_PATH=./lib/ssl/key.pem
    volumes:
      - .:/openTriage/.
    entrypoint: python api.py

  shiny:
    container_name: shiny
    # To build the image locally, comment out "image" below, and uncomment
    # "build" and the lines indented under it.
    # image: rocker/shiny
    build: ./shiny/
    restart: always
    # Setting this to something other than 'root' will cause shiny apps not to
    # run on the localhost:80 "Welcome to Shiny" diagnostics page mentioned
    # below.
    user: shiny
    # Uncomment the lines below to disable application logs STDOUT output
    # environment:
    #   - APPLICATION_LOGS_TO_STDOUT=false
    ports:
      - 3838
    volumes:
      #- shiny_logs:/var/log/shiny-server
      # Comment the line below out for initial testing. With it commented out,
      # going to localhost:80 in one's web browser will show a "Welcome to
      # Shiny Server!" diagnostics page.
      - ./shiny/apps:/srv/shiny-server
      - ./frameworks:/srv/shiny-server/frameworks

volumes:
  shiny_logs:

    # TODO: Use kubernetes instead of docker-compose?
